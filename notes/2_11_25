HTTP and HTTP Proxies (assignment 1 tutorial)

application layer protocols

variable headers
human readable


HTTP
- layered over bidirectional byte stream
	- almost always TCP
- interaction
	- client looks up host (DNS)
	- client sends request to server
(see slides)


format
- request line
	- method
	- space
	- URL
	- space
	- version
	- carriage return '\r'
	- line feed '\n'
- headers lines
	- header field name
	- space
	- header value
	- space
	- carriage return '\r'
	- line feed '\n'
- blank line
	- '\r'
	- '\n'
- entity body



e.g.
GET /index.html HTTP/1.1
Host: www.example.com
Accept-Language: en-us
Accept-Encoding: gzip, deflate

[body]



response header
- status line
	- version
	- space
	- status code
	- space
	- phrase
- headers lines
- blank line
- entity body

status line
- HTTP version
- 3 digit response code
	- 1xx - informal
	- 2xx - success
		- 200 OK
	- 3xx - redirection
	- 4xx - bad request
	- 5xx - server error


HTTP/1.1 200 OK
Date: [date]
Server: Apache/1.3.14
etc


how to mark end of message
- content-length
- close connection
- implied length
- transfer encoding: chunked (HTTP/1.1)


proxies
- end host that acts as a broker between client and server
	- speaks to server on client's behalf
- why
	- privacy
	- content filtering
	- can use caching (not in this assignment)


proxies
- accept requests from multiple clients
- takes requests and reissues it to server
- takes response and forwards to client

A1
- non-caching, HTTP/1.0 proxy
	- supports only GET requests
- multi-process
	- use fork()
- simple binary that takes a port number
	- ./proxy 12345 (proxy listens on port 12345)
- works in firefox and chrome
	- use settings to point browser to your proxy
- what you need from a client request: host, port, and URI path
	- GET http://www.jhu.edu:80/ HTTP/1.0
- what you send to remote server
	- GET / HTTP/1.0
	- Host: www.jhu.edu:80
	- Connection: close
- check request line and header format
- forward request to client
- non-GET request
	- return "501 Not Implemented"
- unparseable request
	- return "400 Bad Request"
- use provided parsing library


workflow
- modify assignment 0 to have server respond
	- echo of what client sent
- modify to handle concurrent clients
	- use fork()
- create "proxy" server
	- simply repeats client msg to server and repeats server msg back
- client sends HTTP requests, proxy parses


files
- Makefile
- proxy_parse.c/.h
	- library provided to parse HTTP requests
- proxy.c

midterm next week covering all material through this week

multiple selection: one, some, or none could be true
true/false: with explanation
Q/A: short answer responses

1 double sided cheat-sheet

